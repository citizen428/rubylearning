1. First the method 'method' gets called, which outputs the variable 'a' from within the method's scope (where it gets set to 50). 'puts a' displays the value of the variable 'a' from the outer scope where it got set to 10.

2. to_s provides a string representation when the caller explicitly wants a string, to_str provides a string version of the object when it's implicitly demanded, like in argument passing. So having a to_str method basically means agreeing on being used where a string would be used, e.g. in Exception#to_str. That's why classes like Fixnum have to_s methods, but no to_str methods, since there are string representation of numbers, but not string versions.

Further reading:
http://www.rubycentral.com/book/ref_c_string.html#String.to_s
http://www.rubycentral.com/book/ref_c_string.html#String.to_str
http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/96554 (the IMHO clearest resource)

5. 1929, 1951 and 1952 will not be displayed because the array only contains the values 1930 to 1950 since ... is a non-inclusive range not containing the upper boundary.

14. { :name => 'Satish', :email => 'mail@satishtalim.com', :phone => '919371006659' }

16. The following answers return true:

  *2. h.member?("Python")
  *4. h.include?(Ruby)
  *5. h.has_value?("Larry")

17. The correct answer is 3.
  
  [1, 2]
  [3, 4]
  [5, 6]

18. The following answers are correct

  *4. a.sort { |l, r| l.length <=> r.length } (uses Arrayr#sort) 
  *6. a.sort_by { |s| s.length } (uses Enumerable#sort_by) 
